@model LPCopiers.Models.ContactForm

<script src="~/Scripts/jquery-1.8.2.min.js"></script>
<script src="~/Scripts/globalize/globalize.js"></script>
<script src="~/Scripts/jquery.validate.globalize.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/jquery-ui-1.8.24.min.js"></script>

<div class="row">
    <div class="twelve columns" >
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            if (!ViewData.ModelState.IsValid)
            {
                <p class="danger alert">Please check for errors</p>
            }

            <fieldset>
                <legend>Contact Form</legend>
                <ul>
                    <li class="field">
                        @Html.LabelFor(model => model.CName)
                        @Html.TextBoxFor(model => model.CName, new { @class = " normal text input" })
                        @Html.ValidationMessageFor(model => model.CName)
                    </li>

                    <li class="field">
                        <label class="checkbox" for="Customer">
                            Existing Customer <span></span>
                            @Html.EditorFor(model => model.Customer)
                        </label>
                        @Html.ValidationMessageFor(model => model.Customer)
                    </li>

                    <li class="field">
                        @Html.LabelFor(model => model.AccountNo)
                        @Html.TextBoxFor(model => model.AccountNo, new { @class = "wide text input" })
                        @Html.ValidationMessageFor(model => model.AccountNo)
                    </li>

                    <li class="field">
                        @Html.LabelFor(model => model.CompanyURL)
                        @Html.TextBoxFor(model => model.CompanyURL, new { @class = "wide text input" })
                        @Html.ValidationMessageFor(model => model.CompanyURL)
                    </li>

                    <li class="field">
                        @Html.LabelFor(model => model.NoOfUnits)
                        @Html.TextBoxFor(model => model.NoOfUnits, new { @class = "narrow number input" })
                        @Html.ValidationMessageFor(model => model.NoOfUnits)
                    </li>

                    <li class=" field">
                        @Html.LabelFor(model => model.ContactTitle)
                        @Html.TextBoxFor(model => model.ContactTitle, new { @class = "wide text input" })
                        @Html.ValidationMessageFor(model => model.ContactTitle)
                    </li>

                    <li class=" field">
                        @Html.LabelFor(model => model.ContactName)
                        @Html.TextBoxFor(model => model.ContactName, new { @class = "wide text input" })
                        @Html.ValidationMessageFor(model => model.ContactName)
                    </li>

                    <li class=" field">
                        @Html.LabelFor(model => model.Street)
                        @Html.TextBoxFor(model => model.Street, new { @class = "wide text input" })
                        @Html.ValidationMessageFor(model => model.Street)
                    </li>

                    <li class=" field">
                        @Html.LabelFor(model => model.Town)
                        @Html.TextBoxFor(model => model.Town, new { @class = "wide text input" })
                        @Html.ValidationMessageFor(model => model.Town)
                    </li>

                    <li class=" field">
                        @Html.LabelFor(model => model.PostCode)
                        @Html.TextBoxFor(model => model.PostCode, new { @class = "wide text input" })
                        @Html.ValidationMessageFor(model => model.PostCode)
                    </li>

                    <li class=" field">
                        @Html.LabelFor(model => model.Email)
                        @Html.TextBoxFor(model => model.Email, new { @class = "wide text input" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </li>

                    <li class=" field">
                        @Html.LabelFor(model => model.Phone)
                        @Html.TextBoxFor(model => model.Phone, new { @class = "narrow text input" })
                        @Html.ValidationMessageFor(model => model.Phone)
                    </li>

                    <li class="">
                        @Html.LabelFor(model => model.VisitType)
                        <ul>
                            <li>@Html.RadioButtonFor(model => model.VisitType, "Sales") Sales</li>
                            <li>@Html.RadioButtonFor(model => model.VisitType, "Service") Service</li>
                            <li>@Html.RadioButtonFor(model => model.VisitType, "Repair") Repair</li>
                            <li>@Html.RadioButtonFor(model => model.VisitType, "Maintenance") Maintenance</li>
                            <li>@Html.ValidationMessageFor(model => model.VisitType)</li>
                        </ul>
                    </li>

                    <li class=" field">
                        @Html.LabelFor(model => model.VisitDate)
                        @*@Html.TextBoxFor(model => model.VisitDate, new { @id="visitDate", @placeholder="mm/dd/yyyy" })*@
                        @Html.TextBoxFor(model => model.VisitDate, "{0:dd/MM/yyyy}", new { @id = "visitDate", @placeholder = "mm/dd/yyyy", @class = " narrow text input" })
                        @Html.ValidationMessageFor(model => model.VisitDate)
                    </li>
                </ul>
                <p>
                    <input type="submit" value="Submit" class="medium success btn" />
                </p>
            </fieldset>
        }
    </div>
</div>

<script type="text/javascript">
    $("#VisitDate").datepicker({
        minDate: +7, maxDate: +90,
        dateFormat: "dd/mm/yy"
    });

    //$.validator.addMethod('date', function (value, element) {
    //    if (this.optional(element)) {
    //        return true;
    //    }
    //    var ok = true;
    //    try{
    //        $.datepicker.parseDate('dd/MM/yyyy', value);
    //    }
    //    catch(err){
    //        ok = false;
    //    }
    //    return ok;
    //});
</script>


